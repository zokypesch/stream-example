// Code generated by protoc-gen-go. DO NOT EDIT.
// source: simple.proto

package srv

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SimpleData struct {
	Msg                  string   `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SimpleData) Reset()         { *m = SimpleData{} }
func (m *SimpleData) String() string { return proto.CompactTextString(m) }
func (*SimpleData) ProtoMessage()    {}
func (*SimpleData) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ffd045dd4d042c1, []int{0}
}

func (m *SimpleData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SimpleData.Unmarshal(m, b)
}
func (m *SimpleData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SimpleData.Marshal(b, m, deterministic)
}
func (m *SimpleData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SimpleData.Merge(m, src)
}
func (m *SimpleData) XXX_Size() int {
	return xxx_messageInfo_SimpleData.Size(m)
}
func (m *SimpleData) XXX_DiscardUnknown() {
	xxx_messageInfo_SimpleData.DiscardUnknown(m)
}

var xxx_messageInfo_SimpleData proto.InternalMessageInfo

func (m *SimpleData) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type SimpleRequestHandler struct {
	Msg                  string   `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SimpleRequestHandler) Reset()         { *m = SimpleRequestHandler{} }
func (m *SimpleRequestHandler) String() string { return proto.CompactTextString(m) }
func (*SimpleRequestHandler) ProtoMessage()    {}
func (*SimpleRequestHandler) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ffd045dd4d042c1, []int{1}
}

func (m *SimpleRequestHandler) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SimpleRequestHandler.Unmarshal(m, b)
}
func (m *SimpleRequestHandler) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SimpleRequestHandler.Marshal(b, m, deterministic)
}
func (m *SimpleRequestHandler) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SimpleRequestHandler.Merge(m, src)
}
func (m *SimpleRequestHandler) XXX_Size() int {
	return xxx_messageInfo_SimpleRequestHandler.Size(m)
}
func (m *SimpleRequestHandler) XXX_DiscardUnknown() {
	xxx_messageInfo_SimpleRequestHandler.DiscardUnknown(m)
}

var xxx_messageInfo_SimpleRequestHandler proto.InternalMessageInfo

func (m *SimpleRequestHandler) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type SimpleResponseHandler struct {
	Status               bool     `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SimpleResponseHandler) Reset()         { *m = SimpleResponseHandler{} }
func (m *SimpleResponseHandler) String() string { return proto.CompactTextString(m) }
func (*SimpleResponseHandler) ProtoMessage()    {}
func (*SimpleResponseHandler) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ffd045dd4d042c1, []int{2}
}

func (m *SimpleResponseHandler) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SimpleResponseHandler.Unmarshal(m, b)
}
func (m *SimpleResponseHandler) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SimpleResponseHandler.Marshal(b, m, deterministic)
}
func (m *SimpleResponseHandler) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SimpleResponseHandler.Merge(m, src)
}
func (m *SimpleResponseHandler) XXX_Size() int {
	return xxx_messageInfo_SimpleResponseHandler.Size(m)
}
func (m *SimpleResponseHandler) XXX_DiscardUnknown() {
	xxx_messageInfo_SimpleResponseHandler.DiscardUnknown(m)
}

var xxx_messageInfo_SimpleResponseHandler proto.InternalMessageInfo

func (m *SimpleResponseHandler) GetStatus() bool {
	if m != nil {
		return m.Status
	}
	return false
}

func init() {
	proto.RegisterType((*SimpleData)(nil), "srv.SimpleData")
	proto.RegisterType((*SimpleRequestHandler)(nil), "srv.SimpleRequestHandler")
	proto.RegisterType((*SimpleResponseHandler)(nil), "srv.SimpleResponseHandler")
}

func init() { proto.RegisterFile("simple.proto", fileDescriptor_5ffd045dd4d042c1) }

var fileDescriptor_5ffd045dd4d042c1 = []byte{
	// 185 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x29, 0xce, 0xcc, 0x2d,
	0xc8, 0x49, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2e, 0x2e, 0x2a, 0x53, 0x92, 0xe3,
	0xe2, 0x0a, 0x06, 0x0b, 0xba, 0x24, 0x96, 0x24, 0x0a, 0x09, 0x70, 0x31, 0xe7, 0x16, 0xa7, 0x4b,
	0x30, 0x2a, 0x30, 0x6a, 0x70, 0x06, 0x81, 0x98, 0x4a, 0x1a, 0x5c, 0x22, 0x10, 0xf9, 0xa0, 0xd4,
	0xc2, 0xd2, 0xd4, 0xe2, 0x12, 0x8f, 0xc4, 0xbc, 0x94, 0x9c, 0xd4, 0x22, 0x2c, 0x2a, 0xf5, 0xb9,
	0x44, 0x61, 0x2a, 0x8b, 0x0b, 0xf2, 0xf3, 0x8a, 0x53, 0x61, 0x4a, 0xc5, 0xb8, 0xd8, 0x8a, 0x4b,
	0x12, 0x4b, 0x4a, 0x8b, 0xc1, 0xaa, 0x39, 0x82, 0xa0, 0x3c, 0xa3, 0x3e, 0x46, 0x2e, 0x5e, 0x88,
	0x8e, 0xe0, 0xd4, 0xa2, 0xb2, 0xcc, 0xe4, 0x54, 0x21, 0x63, 0x2e, 0x4e, 0xa8, 0x11, 0x01, 0xce,
	0x42, 0xfc, 0x7a, 0xc5, 0x45, 0x65, 0x7a, 0x08, 0xc7, 0x49, 0xa1, 0x0b, 0x28, 0x31, 0x68, 0x30,
	0x1a, 0x30, 0x0a, 0x79, 0xc0, 0x4c, 0x81, 0xd9, 0x27, 0x89, 0xa4, 0x0e, 0xd5, 0xd5, 0x52, 0x52,
	0x28, 0x52, 0x28, 0xce, 0x54, 0x62, 0x48, 0x62, 0x03, 0x87, 0x8b, 0x31, 0x20, 0x00, 0x00, 0xff,
	0xff, 0x5a, 0x3b, 0xc3, 0xa3, 0x27, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SimpleServiceClient is the client API for SimpleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SimpleServiceClient interface {
	SimpleRPC(ctx context.Context, opts ...grpc.CallOption) (SimpleService_SimpleRPCClient, error)
	SimpleHandler(ctx context.Context, in *SimpleRequestHandler, opts ...grpc.CallOption) (*SimpleResponseHandler, error)
}

type simpleServiceClient struct {
	cc *grpc.ClientConn
}

func NewSimpleServiceClient(cc *grpc.ClientConn) SimpleServiceClient {
	return &simpleServiceClient{cc}
}

func (c *simpleServiceClient) SimpleRPC(ctx context.Context, opts ...grpc.CallOption) (SimpleService_SimpleRPCClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SimpleService_serviceDesc.Streams[0], "/srv.SimpleService/SimpleRPC", opts...)
	if err != nil {
		return nil, err
	}
	x := &simpleServiceSimpleRPCClient{stream}
	return x, nil
}

type SimpleService_SimpleRPCClient interface {
	Send(*SimpleData) error
	Recv() (*SimpleData, error)
	grpc.ClientStream
}

type simpleServiceSimpleRPCClient struct {
	grpc.ClientStream
}

func (x *simpleServiceSimpleRPCClient) Send(m *SimpleData) error {
	return x.ClientStream.SendMsg(m)
}

func (x *simpleServiceSimpleRPCClient) Recv() (*SimpleData, error) {
	m := new(SimpleData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *simpleServiceClient) SimpleHandler(ctx context.Context, in *SimpleRequestHandler, opts ...grpc.CallOption) (*SimpleResponseHandler, error) {
	out := new(SimpleResponseHandler)
	err := c.cc.Invoke(ctx, "/srv.SimpleService/SimpleHandler", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SimpleServiceServer is the server API for SimpleService service.
type SimpleServiceServer interface {
	SimpleRPC(SimpleService_SimpleRPCServer) error
	SimpleHandler(context.Context, *SimpleRequestHandler) (*SimpleResponseHandler, error)
}

func RegisterSimpleServiceServer(s *grpc.Server, srv SimpleServiceServer) {
	s.RegisterService(&_SimpleService_serviceDesc, srv)
}

func _SimpleService_SimpleRPC_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SimpleServiceServer).SimpleRPC(&simpleServiceSimpleRPCServer{stream})
}

type SimpleService_SimpleRPCServer interface {
	Send(*SimpleData) error
	Recv() (*SimpleData, error)
	grpc.ServerStream
}

type simpleServiceSimpleRPCServer struct {
	grpc.ServerStream
}

func (x *simpleServiceSimpleRPCServer) Send(m *SimpleData) error {
	return x.ServerStream.SendMsg(m)
}

func (x *simpleServiceSimpleRPCServer) Recv() (*SimpleData, error) {
	m := new(SimpleData)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _SimpleService_SimpleHandler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimpleRequestHandler)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimpleServiceServer).SimpleHandler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/srv.SimpleService/SimpleHandler",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimpleServiceServer).SimpleHandler(ctx, req.(*SimpleRequestHandler))
	}
	return interceptor(ctx, in, info, handler)
}

var _SimpleService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "srv.SimpleService",
	HandlerType: (*SimpleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SimpleHandler",
			Handler:    _SimpleService_SimpleHandler_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SimpleRPC",
			Handler:       _SimpleService_SimpleRPC_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "simple.proto",
}
